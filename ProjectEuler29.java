/*
 * This program computes the solution to Project Euler problem 29, which is to
 * find the number of distinct terms in a sequence generated by a^b for 2 <= a,b
 * <= 100. A list is built iteratively containing these distinct terms and the 
 * size of the list is then printed.
 */
package projecteuler29;

import java.math.BigInteger;
import java.util.ArrayList;

public class ProjectEuler29 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        BigInteger lowerBound = new BigInteger("2");
        BigInteger upperBound = new BigInteger("100");
        ArrayList<BigInteger> list = generateSequence(lowerBound, upperBound);
        System.out.println(list.size());
    }//end main method
    
    /*Generates the sequence using the passed parameters as the bounds, building
    a list of unique terms and returning this list to the caller.*/
    private static ArrayList<BigInteger> generateSequence(BigInteger lowerBound, BigInteger upperBound) {
        ArrayList<BigInteger> list = new ArrayList<>();
        BigInteger temp;
        for (int i = lowerBound.intValue(); i <= upperBound.intValue(); i++) {
            for (int j = lowerBound.intValue(); j <= upperBound.intValue(); j++) {
                temp = new BigInteger(Integer.toString(i)).pow(j);
                if (!list.contains(temp)) {
                    list.add(temp);
                }
            }
        }
        return list;
    }//end generateSequence method
}//end class
